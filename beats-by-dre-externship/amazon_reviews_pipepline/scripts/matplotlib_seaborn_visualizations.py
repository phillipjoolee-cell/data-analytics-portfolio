# -*- coding: utf-8 -*-
"""matplotlib_seaborn_visualizations

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L-Yv9ppojGRnWqGgpvtnN5U1wgR3AOvW
"""

pip install XlsxWriter

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# 1: Paths
src = "Beats_Scraped_Data_Pandas_EDA.xlsx"                  # input
out_xlsx = "Beats_Scraped_Data_matplotlib_seaborn.xlsx"  # output

# 2: Load
df = pd.read_excel(src)

# 3: Prep
# Ratings 1..5 only
df["rating"] = pd.to_numeric(df.get("rating"), errors="coerce")
df = df[(df["rating"] >= 1) & (df["rating"] <= 5)]

# Clean timestamp
if "timestamp" in df.columns:
    df["timestamp"] = df["timestamp"].astype(str).str.replace("Reviewed in the United States ", "", regex=False)

df["parsed_ts"] = pd.to_datetime(df.get("timestamp"), errors="coerce")
df["ym"] = df["parsed_ts"].dt.to_period("M").astype(str)

# 4: KPIs
total_reviews = int(df.shape[0])
avg_rating = float(df["rating"].mean()) if total_reviews > 0 else np.nan
pct_five_star = float((df["rating"] == 5).mean() * 100) if total_reviews > 0 else np.nan
pct_verified = float((df.get("is_verified") == True).mean() * 100) if total_reviews > 0 else np.nan

if "product_id" in df.columns and not df["product_id"].empty:
    vc = df["product_id"].value_counts()
    most_reviewed_product = vc.idxmax()
    most_reviewed_count = int(vc.max())
else:
    most_reviewed_product = "N/A"
    most_reviewed_count = 0

# 5: Visualizations
# Plot 1: Ratings Distribution
plt.figure(figsize=(10,5))
bins = [0.5,1.5,2.5,3.5,4.5,5.5]
plt.hist(df["rating"].dropna(), bins=bins, edgecolor="black")
plt.title("Distribution of Ratings")
plt.xlabel("Rating (1–5)")
plt.ylabel("Count")
plt.grid(axis="y", alpha=0.3)
plt.tight_layout()
plt.savefig("plot_1_hist_ratings.png", dpi=150)
plt.close()

# Plot 2: Ratings by Product (Top 6) — stacked bar via pandas
if "product_id" in df.columns and not df["product_id"].empty:
    top_products = df["product_id"].value_counts().nlargest(6).index
    sub = df[df["product_id"].isin(top_products)]
    ct = pd.crosstab(sub["product_id"], sub["rating"]).reindex(columns=sorted(sub["rating"].dropna().unique()))
    ax = ct.plot(kind="bar", stacked=True, figsize=(10,5))
    ax.set_title("Ratings by Product (Top 6)")
    ax.set_xlabel("Product ID")
    ax.set_ylabel("Count")
    ax.grid(axis="y", alpha=0.3)
    for tick in ax.get_xticklabels():
        tick.set_rotation(30)
        tick.set_horizontalalignment("right")
    plt.tight_layout()
    plt.savefig("plot_2_ratings_by_product.png", dpi=150)
    plt.close()
else:
    ct = pd.DataFrame()

# Plot 3: Boxplot Variability (Top 6 by count)
if "product_id" in df.columns and not df["product_id"].empty:
    order = df["product_id"].value_counts().nlargest(6).index.tolist()
    data_to_plot = [df.loc[df["product_id"]==pid, "rating"].dropna().values for pid in order]
    plt.figure(figsize=(10,5))
    plt.boxplot(data_to_plot, labels=order, showmeans=True)
    plt.title("Rating Variability by Product (Top 6)")
    plt.xlabel("Product ID")
    plt.ylabel("Rating")
    plt.grid(axis="y", alpha=0.3)
    plt.xticks(rotation=30, ha="right")
    plt.tight_layout()
    plt.savefig("plot_3_box_variability.png", dpi=150)
    plt.close()

# Plot 4: Average Rating Over Time (by Year-Month)
avg_time = df.dropna(subset=["ym"]).groupby("ym")["rating"].mean().sort_index()
if not avg_time.empty:
    plt.figure(figsize=(10,5))
    x = range(len(avg_time))
    plt.plot(x, avg_time.values, marker="o")
    plt.title("Average Rating Over Time (Monthly)")
    plt.xlabel("Year-Month")
    plt.ylabel("Average Rating")
    step = max(1, len(avg_time)//12)  # show ~12 ticks
    idx = list(range(0, len(avg_time), step))
    labels = [avg_time.index[i] for i in idx]
    plt.xticks(idx, labels, rotation=30, ha="right")
    plt.grid(True, alpha=0.3)
    plt.tight_layout()
    plt.savefig("plot_4_avg_rating_over_time.png", dpi=150)
    plt.close()

# 6: Excel Output (Data + KPI + Images)
with pd.ExcelWriter(out_xlsx, engine="xlsxwriter") as writer:
    # Data sheet
    df.to_excel(writer, sheet_name="Data", index=False)

    # Visualizations sheet
    wb = writer.book
    ws = wb.add_worksheet("Visualizations")
    writer.sheets["Visualizations"] = ws

    # Minimal formats
    title_fmt = wb.add_format({"bold": True, "font_size": 16})
    hdr = wb.add_format({"bold": True, "align": "center", "valign": "vcenter", "border": 1})
    val = wb.add_format({"align": "center", "valign": "vcenter", "border": 1})

    # Title
    ws.write(0, 0, "Amazon Reviews: KPI Summary & Visuals", title_fmt)

    # KPI headers
    kpi_headers = ["Total Reviews", "Avg Rating", "% 5 Stars", "% Verified", "Top Product (by count)"]
    for col, text in enumerate(kpi_headers):
        ws.write(2, col, text, hdr)

    # KPI values
    ws.write(3, 0, total_reviews, val)
    ws.write(3, 1, round(avg_rating, 2) if not np.isnan(avg_rating) else "", val)
    ws.write(3, 2, f"{round(pct_five_star, 1)}%" if not np.isnan(pct_five_star) else "", val)
    ws.write(3, 3, f"{round(pct_verified, 1)}%" if not np.isnan(pct_verified) else "", val)
    ws.write(3, 4, f"{most_reviewed_product} ({most_reviewed_count})", val)

    # Column widths
    ws.set_column(0, 0, 16)
    ws.set_column(1, 4, 22)

    # Images (insert if generated)
    row = 6
    images = [
        ("Distribution of Ratings", "plot_1_hist_ratings.png"),
        ("Ratings by Product (Top 6)", "plot_2_ratings_by_product.png"),
        ("Rating Variability by Product", "plot_3_box_variability.png"),
        ("Average Rating Over Time (Monthly)", "plot_4_avg_rating_over_time.png"),
    ]

    subtitle_fmt = wb.add_format({"italic": True, "font_size": 10, "font_color": "#555555"})
    section_fmt = wb.add_format({"bold": True, "font_size": 13})

    for title, img in images:
        from os.path import exists
        if not exists(img):
            continue
        ws.write(row, 0, title, section_fmt)
        ws.insert_image(row + 1, 0, img, {"x_scale": 0.9, "y_scale": 0.9})
        ws.write(row + 26, 0, "", subtitle_fmt)  # spacer/caption placeholder
        row += 28

print("Done. Wrote:", out_xlsx)